

public static String[] buff_arr=new String[]{".;","abc","def","ghi","jkl","mno","pqrs","tu","vwx","yz"};
    public static ArrayList<String> getKPC(String str) {
        if(str.length()==0){
            ArrayList<String> a=new ArrayList<String>();
            a.add("");
            return a;
        }
        char a=str.charAt(0);
        String remain=str.substring(1);
        ArrayList<String> o=getKPC(remain);
        ArrayList<String> out=new ArrayList<>();
        String buff_str=buff_arr[(int)(a-'0')];
        for(char ch:buff_str.toCharArray()){
            for(String st:o){
                out.add(ch+st);
            }
        }

        return out;
    }


vector<string>helper={".;","abc","def","ghi","jkl","mno","pqrs","tu","vwx","yz"};

vector<string> getKPC(string s){
    //Write your code here
    if(s.size()==0){
        return {""};
    }
    char ch=s[0];
    string ros=s.substr(1);
    vector<string>temp=getKPC(ros);
    vector<string>ans;
    for(char c:helper[ch-'0']){
        for(string str:temp){
            ans.push_back(c+str);
        }
    }
    return ans;
}

====================
public boolean IsPalindrome() {
      Node slow = head,fast=head;
	  while(fast != null && fast.next != null){
	  slow=slow.next;
	  fast=fast.next.next;
	  }
	  Node curr=slow,prev=null,next=null;
    while(curr!=null){
      next=curr.next;
      curr.next=prev;
      prev=curr;
      curr=next;
    }
    slow=prev;
	  while(slow!=null){
		if(slow.data!=head.data)
			return false;
		slow=slow.next;
		head=head.next;
	  }
	  return true;
    }
  }

intersection of linkedList
public ListNode getIntersectionNode(ListNode one, ListNode two) {
    ListNode temp1=one,temp2=two;
        while(temp1!=null||temp2!=null){
            if(temp1==temp2){
                return temp1;
            }
            temp1=temp1==null?two:temp1.next;
            temp2=temp2==null?one:temp2.next;
        }
        return null;
    }

===========================================

1)reverse linkedlist using pointer
2)Print all Knight tours
3)Find intersion index
4) Given size of matrix print matrix in spiral order
i/p 3
o/p 1 2 3
    8 9 4
    7 6 5
Yesterday's test questions

Neeraj kumbhkar

class Solution{
}

leatcode 746

class Solution {
    public int minCostClimbingStairs(int[] cost) {
    int n = cost.length;
	int[] dp = new int[n];
	for (int i=0; i<n; i++) {
		if (i<2) dp[i] = cost[i];
		else dp[i] = cost[i] + Math.min(dp[i-1], dp[i-2]);
	}
	return Math.min(dp[n-1], dp[n-2]);
    }
}

public int minCostClimbingStairs(int[] cost) {
        return Math.min(minCost(cost, 0), minCost(cost, 1));
    }

    public int minCost(int[] cost, int i) {
        if (i > cost.length - 1) return 0;
        if (i >= cost.length - 2) return cost[i];
        return cost[i] + Math.min(minCost(cost, i + 1), minCost(cost, i + 2));
    }

https://docs.google.com/spreadsheets/d/1H27xcxatmUpbpJvFfEfmRHftd3V9X14RcoNh_M9JBlg/edit?usp=sharing


https://github.com/Jitmanew-Tyagi/JSP4/blob/main/Main.java


Students ans can be wrong or write

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i] = scn.nextInt();
        }
        int x =scn.nextInt();
        int idx = firstIndex(arr,0,x);
        System.out.println(idx);
    }

    public static int firstIndex(int[] arr, int idx, int x){
        if(idx == arr.length)
        {
            return -1;
        }

        if(x == arr[idx])
        {
            return idx;
        }
       return  firstIndex(arr,idx+1,x);

    }

}
=============
public static int[] allIndices(int[] arr, int x, int idx, int fsf) {
        if(idx == arr.length){
            int[] ans = new int[fsf];
            return ans;
        }

        if(arr[idx] == x){
            fsf+=1;
        }

        int[] ans = allIndices(arr,x,idx+1,fsf);

        if(arr[idx] == x){
            ans[fsf-1] = idx;
        }

        return ans;

    }

https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/
https://leetcode.com/problems/minimum-moves-to-convert-string/
https://leetcode.com/problems/minimum-moves-to-convert-string/
https://leetcode.com/problems/rotate-image/
https://leetcode.com/problems/longest-substring-without-repeating-characters/
https://leetcode.com/problems/valid-anagram/

public String findSubString( String str) {

        HashSet<Character> set = new HashSet<Character>();

        int[] a = new int[256];

        Arrays.fill(a,0);

        for(int i=0; i<str.length(); i++)
            set.add(str.charAt(i));

        int uni = set.size();
        int count = 0;
        int start =0;
        int startNew =0;
        int length =0;
        int min = Integer.MAX_VALUE;

        for(int i=0; i<str.length(); i++) {


              if(a[str.charAt(i)] == 0) {
                  a[str.charAt(i)]++;
                  count++;
              }

              else
                a[str.charAt(i)]++;

            if(count == uni) {

                while(a[str.charAt(start)]>1) {
                        a[str.charAt(start)]--;
                        start++;
                }
            }

            length = i - start + 1;
            if(min>length && count == uni) {

2) int max = 0;
	        int currMax = 0;
	        if(s.length()==1) {
	        	return 1;
	        }
	        for(int i=0, j=1; i<s.length()&&j<s.length();){
	            if(s.substring(i, j).contains(""+s.charAt(j))) {
	            	currMax = j-i;
	            	i += s.substring(i, j).indexOf(s.charAt(j))+1;
	            } else {
	            	currMax = j-i+1;
	            }
	            max = currMax>max? currMax: max;
	            j++;
	        }
			return max;
	    }

leetcode problems

https://leetcode.com/problems/watering-plants-ii/

int minimumRefill(vector<int>& plants, int capacityA, int capacityB) {
        int b = 0;
        int e = plants.size()-1;

        int ca = capacityA;
        int cb = capacityB;

        int count = 0;

        while(b<e){

            if(plants[b]>ca){
                count++;
                ca = capacityA;
            }

            if(plants[e]>cb){
                count++;
                cb = capacityB;
            }

            ca-=plants[b];
            cb-=plants[e];
            b++;
            e--;
        }

        //now b == e

        if(e==b&&plants[b]>ca&&plants[b]>cb) count++;

        return count;
    }
2)
public int minimumRefill(int[] nums, int capacityA, int capacityB) {
        int i=0;
        int j=nums.length-1;
        int a=capacityA;
        int b=capacityB;
        int count=0;
        while(i<=j){
            if(nums[i]<=a)
                a-=nums[i];
            else{
                count++;
                a=capacityA-nums[i];
            }

            if(nums[j]<=b)
                b-=nums[j];
            else{
                count++;
                b=capacityB-nums[j];
            }
            i++;
            j--;
        }
        return count;
    }

int minimumRefill(vector<int>& plants, int capacityA, int capacityB) {
        int n = plants.size();
        int canA = capacityA, canB = capacityB;
        int a=0, b=n-1;

        int count=0;
        while(a<b) {
            if(plants[a] > canA) {
                canA = capacityA;
                count++;
            }
            canA -= plants[a++];

            if(plants[b] > canB) {
                canB = capacityB;
                count++;
            }
            canB -= plants[b--];
        }

        if(a==b) {
            if(max(canA,canB) < plants[a]) count++;
        }

        return count;
    }

2103

class Solution {
    public int countPoints(String rings) {
        HashSet<Character> set[]=new HashSet[10];
        for(int i=0;i<set.length;i++)
            set[i]=new HashSet<Character>();
        for(int i=1;i<rings.length();i+=2){
            set[rings.charAt(i)-'0'].add(rings.charAt(i-1));
        }
        int count=0;
        for(HashSet<Character> s:set)
            if(s.size()==3)
                count++;

        return count;
    }
}

class Colors {
   public:
   bool Blue = false;
   bool Green = false;
   bool Red = false;
};
class Solution {
public:
    int countPoints(string rings) {
        int n = rings.length();
        vector<Colors *> v(10);
        for(int i = 0; i < 10; i++) {
            Colors * obj = new Colors();
            v[i] = obj;
        }
        for(int i = 0; i < n; i++) {
            char color = rings[i];
            int index = rings[i+1]-'0';
            //cout<<i<<" "<<color<<endl;
            if(color=='B') {
                v[index]->Blue = true;
            }
            else if(color=='G') {
                v[index]->Green = true;
            }
            else if(color=='R') {
                v[index]->Red = true;
            }
        }
        int ans = 0;
        for(int i = 0; i < 10; i++) {
            Colors * currobj = v[i];
            //cout<<i<<" "<<currobj->Blue<<" "<<currobj->Green<<" "<<currobj->Red<<endl;
            if(currobj->Blue && currobj->Green && currobj->Red)
                ans++
====================================
2104. Sum of Subarray Ranges

class Solution {
    public long subArrayRanges(int[] nums) {
        long sum = 0;
        for(int i=0;i<nums.length;i++){
            int min = nums[i];
            int max = nums[i];
            for(int j=i;j<nums.length;j++){
                min = Math.min(min,nums[j]);
                max = Math.max(max,nums[j]);
                sum += max-min;
            }
        }
        return sum;
    }
}
==========
2161
public static int minimumTime(String s) {
        StringBuilder sb = new StringBuilder(s);
        int i = 0, j = s.length() - 1;
        int sum = 0;
        while (i < j) {
            if (s.substring(i, i + 1).equals("11")) {
                sum += 2;
                i++;
            } else if (s.charAt(i) == '1') {
                sum += 1;

            }
            i++;

            if (s.substring(j - 1, j).equals("11")) {
                sum += 2;
                j--;
            } else if (s.charAt(j) == '1') {
                sum += 1;
            }
            j--;


        }

        System.out.println();
        return 0;
    }

2138

StringBuilder sb=new StringBuilder(s);
        if(s.length()%k!=0)
        {
            while(sb.length()%k!=0)
            {
                sb.append(fill);
            }
            s=sb.toString();
        }

        String res[]=new String[s.length()/k];
        int j=0;
        for(int i=0;i<s.length();i+=k)
        {
            res[j++]=s.substring(i,k+i);
        }
        return res;

2138, 2139, 2103, 2103, 2104, 2105


https://leetcode.com/problems/decode-ways-ii/
https://leetcode.com/problems/decode-ways/
https://practice.geeksforgeeks.org/problems/friends-pairing-problem5425/1/
https://leetcode.com/problems/decode-ways-ii/
https://leetcode.com/problemset/all/?search=decode+ways+&page=1
https://leetcode.com/problems/sum-of-subarray-ranges/
https://leetcode.com/problems/watering-plants-ii/
https://leetcode.com/problems/climbing-stairs/submissions/
https://leetcode.com/problems/rings-and-rods/

pepcoding telegram link

https://t.me/pepcoding.
=========================

Climb Stairs With Variable Jumps

public static int climb(int n, int[] arr,int idx){
        if(n<0) return 0;
        if(n==0) return 1;
        int ans=0;

        for(int i=1;i<=arr[idx];i++){
            ans+=climb(n-i,arr,idx+i);
        }
        return ans;
    }

https://leetcode.com/problems/find-the-winner-of-the-circular-game/



public static String recss(String ss)
    {
        if(ss.length() <= 1) return ss;
        String ans = "";
        if (ss.charAt(0) == 'h'  && ss.charAt(1) == 'i' && ss.length() >= 2) {
            ans+= "pep" + recss(ss.substring(2, ss.length()));
            return ans;
        }
        ans+= ss.charAt(0) + recss(ss.substring(1, ss.length()));
        return ans;
    }
public static void replaceAndPrint(String s,String asf){
        if(s.length()==0 || s.length()==1){
            System.out.println(asf);
            return;
        }

        if(s.charAt(0)=='h' && s.charAt(1)=='i'){
            asf+="pep";
            replaceAndPrint(s.substring(2),asf);
        }
        else{
            asf+=s.charAt(0)+"";
            replaceAndPrint(s.substring(1),asf);
        }
    }
===========
public static String rec_replace(String str){
        if(str.length()==0||str.length()==1){
            return str;
        }
        if(str.charAt(0)=='h'&&str.charAt(1)=='i')
        {
            String sub_out=rec_replace(str.substring(2));
            return "pep"+sub_out;
        }
        else{
            String sub_out=rec_replace(str.substring(1));
            return str.charAt(0)+sub_out;
        }

    }

	https://leetcode.com/problems/longest-palindromic-subsequence/     516
	public int rec(String s, int left, int right) {
        if(left>right) return 0;
        if(left==right) return 1;
        if(s.charAt(left)!=s.charAt(right))
            return Math.max(rec(s,left+1,right),rec(s,left,right-1));
        else
            return 2+rec(s,left+1,right-1);
    }

115

70

https://leetcode.com/problems/wildcard-matching/
int m=s.length();
        int n=p.length();
        vector<vector<bool>>dp(m+1,vector<bool>(n+1,0));
        dp[0][0]=1;
        for(int j=1;j<=n;j++){
            if(p[j-1]=='*') dp[0][j]=dp[0][j-1];
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(s[i-1]==p[j-1] or p[j-1]=='?') dp[i][j]=dp[i-1][j-1];
                else if(p[j-1]=='*') dp[i][j]=dp[i-1][j] or dp[i][j-1];
                else dp[i][j]=0;
            }
        }
        return dp[m][n];
https://leetcode.com/problems/longest-palindromic-substring/

GOfG
subset sum problems

https://leetcode.com/problems/uncrossed-lines/
class Solution {
    public int maxUncrossedLines(int[] nums1, int[] nums2) {
        int[][] dp = new int[nums1.length+1][nums2.length+1];
        for(int[] d: dp) Arrays.fill(d,-1);
        return rec(nums1, nums2, 0, 0, dp);
    }
    public int rec(int[] n1, int[] n2, int i, int j, int[][] dp){
        if(i == n1.length || j == n2.length) return dp[i][j] = 0;
        int ans = 0;
        if(dp[i][j]!= -1) return dp[i][j];
        if(n1[i] == n2[j]) {
            ans = rec(n1, n2, i+1, j+1, dp) + 1;
        }
        else
        {
            ans = Math.max(rec(n1, n2, i+1, j, dp), rec(n1, n2, i, j+1, dp));
        }
        return dp[i][j] = ans;
    }


}


class Solution {
    public int maxUncrossedLines(int[] nums1, int[] nums2) {
        int[][] dp = new int[nums1.length+1][nums2.length+1];
        for(int[] d: dp){
            Arrays.fill(d,-1);
        }
        return getLines(nums1, nums2, 0,0, dp);
    }

    public int getLines(int[] nums1, int[] nums2, int i,int j, int[][] dp){

        if(i == nums1.length || j == nums2.length){
            dp[i][j] = 0;
            return 0;
        }
        int a =0;

        if(dp[i][j] !=-1)
            return dp[i][j];

        if(nums1[i] == nums2[j]){
             a = getLines(nums1, nums2, i+1, j+1, dp) + 1;

        }

        else{
            a = Math.max(getLines(nums1, nums2, i+1, j, dp), getLines(nums1, nums2, i, j+1, dp));
        }


        return dp[i][j] = a;
    }
}

https://leetcode.com/problems/coin-change-2/
https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/
https://leetcode.com/problems/jump-game/
https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/


Stack< Character> st = new Stack<>();
    for (int i = 0; i < str.length(); i++) {
      char ch = str.charAt(i);
      if (ch == ')') {
        if (st.peek() == '(') {
          System.out.println(true);
          return;
        } else {
          while (st.peek() != '(') {
            st.pop();
          }
          st.pop();
        }
      } else {
        st.push(ch);
      }
    }

    System.out.println(false);
  }

  Stack<Character> st = new Stack<>();
            for (int  i=0;i<str.length();i++){
                char ch = str.charAt(i);
                if(ch  == ')'){
                   if(st.peek()=='('){
                       System.out.println(true);
                       return;
                   } else {
                       while(st.peek() != '('){
                           st.pop();
                       }
                       st.pop();
                   }
                } else{
                    st.push(ch);

                }
            }
             System.out.println(false);
        }


https://leetcode.com/problems/online-stock-span/
https://leetcode.com/problems/largest-rectangle-in-histogram/
https://leetcode.com/problems/asteroid-collision/
https://leetcode.com/problems/simplify-path/
https://leetcode.com/problems/sliding-window-maximum/
https://leetcode.com/problems/min-stack/

https://leetcode.com/problems/binary-tree-paths/



public static void printKLevelsDown(Node node, int k){
    if(node == null) return;
    if(k == 0)
      System.out.println(node.data);
    printKLevelsDown(node.left, k-1);
    printKLevelsDown(node.right, k-1);

  }



  test question merge overlapping
  class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> answer = new ArrayList<>();

        if(intervals.length != 0 || intervals != null){
            Arrays.sort(intervals, (a,b)->{
            if(a[0]==b[0]) return a[1]-b[1];
            return a[0]-b[0];
        });

            int start = intervals[0][0];
            int end = intervals[0][1];
            for(int[] i: intervals){
                if(i[0] <= end){
                    end = Math.max(end, i[1]);
                } else {
                    answer.add(new int[]{start,end});
                    start = i[0];
                    end = i[1];
                }
            }
            answer.add(new int[]{start,end});

        }

        return answer.toArray(new int[0][]);
    }
}


https://leetcode.com/problems/binary-tree-inorder-traversal/

https://leetcode.com/problems/validate-binary-search-tree/

https://leetcode.com/problems/validate-binary-search-tree/

leetcode 173
leetcode 98

https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/
https://www.lintcode.com/problem/1534/
https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/
https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
https://leetcode.com/problems/serialize-and-deserialize-bst/

=======================================================================================
GRAPH
https://leetcode.com/problems/find-if-path-exists-in-graph/
https://www.pepcoding.com/resources/online-java-foundation/graphs/gcc-official/ojquestion

7
8
0 1 10
1 2 10
2 3 10
0 3 10
3 4 10
4 5 10
5 6 10
4 6 10
0
6


https://leetcode.com/problems/is-graph-bipartite/
https://leetcode.com/problems/rotting-oranges/
https://leetcode.com/problems/binary-prefix-divisible-by-5/
https://leetcode.com/problems/word-pattern/
https://leetcode.com/problems/word-pattern/discuss/73402/8-lines-simple-Java
https://nados.io/question/spread-of-infection
https://www.geeksforgeeks.org/calculation-of-address-of-element-of-1-d-2-d-and-3-d-using-row-major-and-column-major-order/
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/
https://leetcode.com/problems/course-schedule/
https://leetcode.com/problems/course-schedule-ii/
https://leetcode.com/problems/longest-increasing-path-in-a-matrix/
https://leetcode.com/problems/redundant-connection/
https://leetcode.com/problems/number-of-operations-to-make-network-connected/
https://leetcode.com/problems/lexicographically-smallest-equivalent-string/
https://www.codingninjas.com/codestudio/problem-details/smallest-equivalent-string_1381859
https://leetcode.com/contest/biweekly-contest-73/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/
https://leetcode.com/problems/max-area-of-island/discuss/1855182/Java-solution-TC-(m*n)-SC(1)
https://leetcode.com/problems/satisfiability-of-equality-equations/
https://leetcode.com/problems/optimize-water-distribution-in-a-village/
https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/graphs/optimize-water-distribution-official/ojquestion